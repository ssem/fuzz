#!/usr/bin/env python
import os
import sys
import argparse
import requests

class Http:
    def __init__(self, ip, port, firmware):
        self.ip = ip
        self.port = port
        self.firmware = firmware

    def find_unauth_urls(self):
        results = {}
        for path in set(self._find_all_paths()):
            url = 'http://%s:%s/ui/1.0.99.162464/%s' % (self.ip, self.port, path.lstrip('/local'))
            print url
            try:
                http = requests.get(url, timeout=3)
                results[http.content] = url
            except:pass
        for url in results:
            yield results[url]

    def _find_all_paths(self):
        bot = os.path.dirname(self.firmware)
        for root, dirs, files in os.walk(self.firmware):
            for f in files:
                yield os.path.join(root.split(bot)[-1], f)
        '''
        web = {}
        for dpath, dnames, fnames in os.walk(self.firmware):
            for f in fnames:
                # filter in
                if f.endswith('.htm') or f.endswith('.html') \
                or f.endswith('.asp') or f.endswith('js') \
                or f.endswith('.ha') or f.endswith('.css') \
                or f.endswith('.cgi') or f.startswith('index.'):
                    web[dpath] = ''
        for w in web:
           for dpath, dnames, fnames in os.walk(w):
                for f in fnames:
                    # filter out
                    if f.endswith('.jpg') or f.endswith('.png') \
                    or f.endswith('.jpeg') or f.endswith('.gif'):
                        continue
                    yield '/%s' % f
                    yield '/%s' % os.path.join(os.path.basename(w), f)
        yield '/'
        '''

if __name__ == '__main__':
    parse = argparse.ArgumentParser()
    parse.add_argument('ip', help='target ip address')
    parse.add_argument('port', help='target port number')
    parse.add_argument('file', help='path to extracted www file')
    parse.add_argument('output', help='output file')
    args = parse.parse_args()
    http = Http(args.ip, args.port, args.file)
    f = open(args.output, 'w+')
    for path in http.find_unauth_urls():
        f.write('%s\n' % path)
